{"/home/travis/build/npmtest/node-npmtest-express-debug/test.js":"/* istanbul instrument in package npmtest_express_debug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-debug/lib.npmtest_express_debug.js":"/* istanbul instrument in package npmtest_express_debug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_debug = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_debug = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-debug/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-debug && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_debug */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_debug\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_debug.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_debug.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_debug.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_debug.__dirname + '/lib.npmtest_express_debug.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/lib/index.js":"\"use strict\";\nvar path = require('path'),\n    xtend = require('xtend'),\n    panels = require('./panels'),\n    request = require('./request'),\n    response = require('./response');\n\n// default express-debug settings\nvar defaults = {\n    panels: ['locals', 'request', 'session', 'template', 'software_info'],\n    depth: 4,\n    extra_panels: [],\n    path: '/express-debug',\n    extra_attrs: '',\n    sort: false\n};\n\n\nmodule.exports = function (app, settings) {\n    // initialize settings\n    settings = xtend(defaults, settings || {});\n\n    // load and initialize panels\n    panels.load(app, settings.panels.concat(settings.extra_panels), settings);\n\n    response.init(app, settings);\n\n\n    var handle = app.handle;\n    app.handle = function (req) {\n        req.EDT = {};\n        panels.handle(req);\n        handle.apply(this, arguments);\n    };\n\n    // we need to carefully insert EDT at the correct location in the\n    // middleware stack to maintain all functionality\n    var connectr = require('connectr')(app);\n    connectr.index(1).as('express');\n\n    connectr.after('express').use(function EDT(req, res, next) {\n        panels.request(req);\n        response.patch(res);\n\n        if (settings.path === req.path) {\n            // standalone express-debug page\n            res.render();\n        } else {\n            next();\n        }\n    }).as('express-debug');\n\n\n    if (panels.use_requests) {\n        // grab raw request body in case of non-JSON/form-data\n        connectr.after('express-debug').use(request.rawBody);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/lib/panels/index.js":"\"use strict\";\nvar panels = module.exports,\n    path = require('path'),\n    jade = require('jade'),\n    fs = require('fs'),\n    loaded_panels = [],\n\n    hooks = {\n        handle: [], // need to run a request initializer per request (beginning of request, minimal functionality)\n        request: [], // need to run a request initializer per request (EDT middleware time, more functionality)\n        finalize: [], // need to run a request finalizer per request\n        pre_render: [], // pre-render per request (after finalize)\n        post_render: [] // post-render per request\n    },\n\n    // compiled jade templates\n    cached_panels = {};\n\npanels.use_requests = false;\n\npanels.load = function(app, _panels, settings) {\n    settings.mixin_path = path.resolve(path.join(__dirname, '..', 'templates', 'mixins.jade'));\n\n    _panels.forEach(function (panel) {\n        // builtins\n        if (typeof panel === 'string') {\n            try {\n                var tmp = require('./' + panel);\n                loaded_panels.push(tmp)\n            } catch (e) {\n                console.error('EDT: Error loading builtin panel ' + panel, e);\n            }\n\n        // custom panels\n        } else if (typeof panel === 'object') {\n            loaded_panels.push(panel);\n        }\n    });\n\n    loaded_panels.forEach(function (panel) {\n        // initialize panels if they need it\n        panel.initialize && panel.initialize(app);\n\n        // keep track of requests if we need to\n        panels.use_requests = panels.use_requests || panel.use_requests;\n\n        // compile the templates with mixins injected\n        var tmpl = fs.readFileSync(panel.template, 'utf-8');\n        tmpl = 'include ' + path.relative(path.dirname(panel.template), settings.mixin_path) + '\\n\\n' + tmpl;\n        cached_panels[panel.template] = jade.compile(tmpl, {filename: panel.template});\n\n        // prepare request hooks\n        Object.keys(hooks).forEach(function (key) {\n            panel[key] && hooks[key].push(panel);\n        });\n    });\n};\n\n// hook runner factory\nvar hook_handle = function(key) {\n    var hook = hooks[key];\n    return function(req) {\n        for (var i = 0; i < hook.length; i++) {\n            hook[i][key](req);\n        }\n    }\n};\n\npanels.handle = hook_handle('handle');\npanels.request = hook_handle('request');\npanels.finalize = hook_handle('finalize');\npanels.pre_render = hook_handle('pre_render');\npanels.post_render = hook_handle('post_render');\n\npanels.render = function(locals, settings, standalone) {\n    var rendered = [];\n\n    for (var i = 0; i < loaded_panels.length; i++) {\n        var panel = loaded_panels[i];\n\n        // if standalone page, skip some irrelevant panels\n        if (!standalone || panel.standalone === true) {\n\n            // main panel function\n            var result = panel.process(locals);\n\n            // tack on settings for settings like object depth\n            result.locals.EDTsettings = settings;\n\n            rendered.push({\n                html: cached_panels[panel.template](result.locals),\n                name: panel.name\n            });\n        }\n    }\n\n    return rendered;\n};\n","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/lib/request.js":"\"use strict\";\nvar panels = require('./panels'),\n    requests = [],\n    request = module.exports = {};\n\nrequest.add = function(req, args) {\n    panels.finalize(req);\n\n    if (panels.use_requests) {\n        var data = {\n            body:        Object.keys(req.body).length ? req.body : req.rawBody,\n            query:       Object.keys(req.query).length ? req.query : undefined,\n            method:      req.method,\n            path:        req.path,\n            locals:      req.res.locals,\n            send_args:   args,\n            req_headers: req.headers,\n            res_headers: req.res._headers,\n            panels:      req.EDT\n        };\n        // break any references\n        requests.push(JSON.parse(JSON.stringify(data)));\n        data = null;\n    }\n};\n\nrequest.list = function(index) {\n    index = index || 0;\n\n    return requests.slice(index, requests.length);\n};\n\nrequest.clear = function(index) {\n    requests = requests.slice(index, requests.length)\n};\n\nrequest.rawBody = function (req, res, next) {\n    var data = '';\n    req.setEncoding('utf8');\n    req.on('data', function (chunk) { data += chunk; });\n    req.on('end', function () { req.rawBody = data || undefined; });\n    next();\n};\n","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/lib/response.js":"\"use strict\";\nvar fs = require('fs'),\n    path = require('path'),\n    jade = require('jade'),\n\n    utils = require('./utils'),\n    panels = require('./panels'),\n    request = require('./request'),\n\n    response = module.exports = {},\n\n    template = path.join(__dirname, 'templates', 'toolbar.jade'),\n    fullpage = path.join(__dirname, 'templates', 'page.jade');\n\n\n\nresponse.init = function(app, settings) {\n    var theme = null;\n\n    // user-supplied css\n    if (settings.theme) {\n        try {\n            theme = fs.readFileSync(settings.theme, 'utf-8');\n        } catch (e) {\n            console.error('EDT: error loading css file at ' + settings.theme);\n            console.error('please check that the path is correct. Err: ', e);\n        }\n    }\n\n    // replaces res.render and injects express-debug toolbar\n    var render = function (view, options, fn) {\n        options = options || {};\n\n        var res = this,\n            req = this.req,\n            app = this.app,\n            accept = req.headers.accept || '';\n\n\n        var finalize = function (err, str) {\n            // keep existing callback if one was passed\n            if (typeof fn === 'function') {\n                fn(err, str);\n            } else if (err) {\n                req.next(err);\n            } else {\n                res.send(str);\n            }\n        };\n\n        panels.finalize(req);\n\n        // support callback function as second arg\n        if (typeof options === 'function') {\n            fn = options;\n            options = {};\n        }\n\n        // merge res.locals\n        options._locals = res.locals;\n\n        var render_toolbar = function (str, callback) {\n            var standalone = settings.path === req.path;\n            var opts = {\n                EDTsettings: settings,\n                theme:       theme,\n                req:         req,\n                standalone:  standalone,\n                extra_attrs: settings.extra_attrs,\n                panels:      panels.render({\n                    locals: options,\n                    app:    app,\n                    res:    res,\n                    req:    req,\n                    view:   view\n                }, settings, standalone)\n            };\n\n            jade.renderFile(template, opts, function (err, toolbar) {\n                callback(err, err ? undefined : utils.inject_toolbar(str, toolbar));\n            });\n        };\n\n        var toolbar_callback = function (err, str) {\n            panels.post_render(req);\n\n            if (err) {\n                console.log(err);\n                req.next(err);\n\n                // skip if this client req isn't expecting html or is ajax\n            } else if (accept.indexOf('html') === -1 ||  req.xhr) {\n                res.send(str);\n\n            } else if (res.EDT_rendered) {\n                // if callback method was used, more than one template may be rendered.\n                // in this care, do not render another copy\n                // TODO: see if we can catch this on the last render, and attach it in .send instead\n                finalize(err, str);\n\n            } else {\n                res.EDT_rendered = true;\n                render_toolbar(str, finalize);\n            }\n        };\n\n        panels.pre_render(req);\n        if (req.path.indexOf(settings.path) === 0) {\n            // standalone mode\n            jade.renderFile(fullpage, function (err, str) {\n                toolbar_callback(err, str);\n            });\n\n        } else {\n            // inject toolbar callback into render callback\n            res._EDT_orig_render.call(res, view, options, toolbar_callback);\n        }\n    };\n\n    var send = function() {\n        if (this.EDT_rendered !== true) {\n            request.add(this.req, arguments);\n        }\n        this._EDT_orig_send.apply(this, arguments);\n    };\n\n    response.patch = function(res) {\n        res._EDT_orig_render = res.render;\n        res.render = render;\n        res._EDT_orig_send = res.send;\n        res.send = send;\n    }\n};","/home/travis/build/npmtest/node-npmtest-express-debug/node_modules/express-debug/lib/utils.js":"\"use strict\";\n\nvar utils = module.exports = {\n    // inject toolbar into html output in the semantically proper place\n    inject_toolbar: function(str, toolbar) {\n        var location = str.lastIndexOf('</body');\n\n        if (location === -1) {\n            location = str.lastIndexOf('</html');\n        }\n\n        if (location === -1) {\n            str += toolbar;\n        } else {\n            str = str.substring(0, location) + toolbar + str.substring(location);\n        }\n        return str;\n    },\n\n    get_ms_from_ns: function(ns) {\n        return (ns / 10000 | 0) / 100;\n    },\n\n    // flatten a multidimensional array, with references\n    flatten: function(arr, out) {\n        out = out || [];\n\n        if (arr instanceof Array) {\n            arr.forEach(function (item, i) {\n                if (item instanceof Array) {\n                    utils.flatten(item, out);\n                } else {\n                    item.EDT_parent = item.EDT_parent || arr;\n                    item.EDT_index = i;\n                    out.push(item)\n                }\n            });\n        }\n\n        return out;\n    }\n};"}